type Query {
    employees: [Employee]
    races: [Race]
    professions: [Profession]
    characters: [CharacterInfo]
    skills: [Skill]
}

type Mutation {
	createCharacter(input: CharacterInfoCreation!): CharacterInfo!

    # restricted
    updateSalary(input: UpdateSalaryInput!): UpdateSalaryPayload
}

type Employee {
    id: ID!
    name: String
    # restricted
    salary: String
}

type CharacterInfo {
	id: ID!
	name: String
	level: Int
	race: Race
	profession: Profession
	skills: [CharacterSkill]
	height: Float
    weight: Float
}

type Race {
	id: ID!
	name: String!
}

type Profession {
	id: ID!
	name: String!
}

type Skill {
	id: ID!
	name: String
	type: String
}

type CharacterSkill {
	skill: Skill
	level: Int
	bonus: Int
}

input CharacterInfoCreation {
	id: ID!
	name: String!
	raceId: String!
	professionId: String!
	level: Int!
}

input UpdateSalaryInput {
    employeeId: ID!
    salary: String!
}

type UpdateSalaryPayload {
    success: Boolean!
    employee: Employee
}
